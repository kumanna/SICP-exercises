(define (filter predicate sequence)
  (cond ((null? sequence) '())
	((predicate (car sequence))
	 (cons (car sequence)
	       (filter predicate (cdr sequence))))
	(else (filter predicate (cdr sequence)))))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
	  (accumulate op initial (cdr sequence)))))

(define (enumerate-interval n1 n2)
  (define (enumerate-interval-iter start stop current)
    (if (< stop start)
	'()
	(if (= start stop)
	    (append current (list start))
	    (enumerate-interval-iter (+ 1 start) stop (append current (list start))))))
  (enumerate-interval-iter n1 n2 '()))

(display (enumerate-interval 0 10))
(newline)
(define (flatmap proc seq)
  (accumulate append '() (map proc seq)))

(define (make-triplet-sum triplet)
  (let ((a (car triplet))
	(b (car (cdr triplet)))
	(c (car (cdr (cdr triplet)))))
    (list a b c (+ a b c))))

(display (make-triplet-sum (list 1 2 4)))
(newline)
(define (number-pairs n)
  (flatmap (lambda (i)
	     (map (lambda (j)
		    (list j i))
		  (enumerate-interval 1 (- i 1))
		  ))
	   (enumerate-interval 1 n)))

(display (number-pairs 10))
(newline)
(define (number-triplets n)
  (flatmap (lambda (i)
	     (map (lambda (j)
		    (append j (list i))) (number-pairs (- i 1))))
	   (enumerate-interval 1 n)))
(display (number-triplets 5))
(newline)

(define (unique-triplets n s)
  (filter (lambda (x) (= (car (cdr (cdr (cdr x)))) s))
	  (flatmap (lambda(x)
		     (list (make-triplet-sum x))) (number-triplets n))))
(display (unique-triplets 10 12))
(newline)
